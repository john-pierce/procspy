// Code generated by "enumer -type=tcpState"; DO NOT EDIT.

//
package procspy

import (
	"fmt"
)

const _tcpStateName = "UNKNOWNESTABLISHEDSYN_SENTSYN_RECVFIN_WAIT1FIN_WAIT2TIME_WAITCLOSECLOSE_WAITLAST_ACKLISTENCLOSING"

var _tcpStateIndex = [...]uint8{0, 7, 18, 26, 34, 43, 52, 61, 66, 76, 84, 90, 97}

func (i tcpState) String() string {
	if i < 0 || i >= tcpState(len(_tcpStateIndex)-1) {
		return fmt.Sprintf("tcpState(%d)", i)
	}
	return _tcpStateName[_tcpStateIndex[i]:_tcpStateIndex[i+1]]
}

var _tcpStateValues = []tcpState{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _tcpStateNameToValueMap = map[string]tcpState{
	_tcpStateName[0:7]:   0,
	_tcpStateName[7:18]:  1,
	_tcpStateName[18:26]: 2,
	_tcpStateName[26:34]: 3,
	_tcpStateName[34:43]: 4,
	_tcpStateName[43:52]: 5,
	_tcpStateName[52:61]: 6,
	_tcpStateName[61:66]: 7,
	_tcpStateName[66:76]: 8,
	_tcpStateName[76:84]: 9,
	_tcpStateName[84:90]: 10,
	_tcpStateName[90:97]: 11,
}

// tcpStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func tcpStateString(s string) (tcpState, error) {
	if val, ok := _tcpStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to tcpState values", s)
}

// tcpStateValues returns all values of the enum
func tcpStateValues() []tcpState {
	return _tcpStateValues
}

// IsAtcpState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i tcpState) IsAtcpState() bool {
	for _, v := range _tcpStateValues {
		if i == v {
			return true
		}
	}
	return false
}
